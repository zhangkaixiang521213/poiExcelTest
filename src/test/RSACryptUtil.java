package test;

import java.math.BigInteger;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.Cipher;

/**
 * RSA 这种算法1978年就出现了，它是第一个既能用于数据加密也能用于数字签名的算法。<br>
 * RSA同时有两把钥匙，公钥与私钥。同时支持数字签名。<br>
 * 数字签名的意义在于，对传输过来的数据进行校验。确保数据在传输过程中不被修改。
 * <ul>
 * 流程分析：
 * <li>甲方构建密钥对儿，将公钥公布给乙方，将私钥保留。</li>
 * <li>甲方使用私钥加密数据，然后用私钥对加密后的数据签名，发送给乙方签名以及加密后的数据；乙方使用公钥、签名来验证待解密数据是否有效，如果有效使用公钥对数据解密。</li>
 * <li>乙方使用公钥加密数据，向甲方发送经过加密后的数据；甲方获得加密数据，通过私钥解密。 </li>
 * <ul>
 * 
 * @author Ice_Liu
 * 
 */
public class RSACryptUtil {
    public static final String KEY_ALGORITHM = "RSA";
    public static final String SIGNATURE_ALGORITHM = "SHA1withRSA";
//    public static final String SIGNATURE_ALGORITHM = "MD5withRSA";
//    private static final String PUBLIC_KEY = "RSAPublicKey";
//    private static final String PRIVATE_KEY = "RSAPrivateKey";
    
    private static final String PRIVATE_KEY = "1C73A0D2E655E651DABAD52704C65C403FFA2D441D3CCEEFD6A9896176DAC5CD88A153A8A42571F9BBFB4841EA25A3D72FF4468E4E293AD660FD48E7C169B65FB61FF2E0D039D081361113953BC5A146359CD52DE547F818C9214F2CED362DE9D0790551D2224F9B69FA6194B21B84AB3A43F82B228F25F7085782BA2F27CA41";
    private static final String PUBLIC_KEY = "A5B38B9483257014C57B2F90D826C9D8EBEC023C6F212664A2766F5032825E996EB222941840BF70E79CE89E358ACB5A8FA0C8411470F3806ABBA2A8E6421AEDBCD6E21B748CA840AB139A16B34274E7E93D6B9374678C7CC68342D71E8173ACCB118D6933CC0952F52CFCD5FEC17EF3E6CB59EEC5550DB8C43106254550003D";

//    private static final String PUBLIC_KEY = "RSAPublicKey";
//    private static final String PRIVATE_KEY = "RSAPrivateKey";

    /**
     * 用私钥对信息生成数字签名
     * 
     * @param data
     *            加密数据
     * @param privateKey
     *            私钥
     * 
     * @return
     * @throws Exception
*/
    public static String sign(byte[] data, String privateKey) throws Exception {
        // 解密由base64编码的私钥
        byte[] keyBytes = CryptUtil.decryptBASE64(privateKey);
        // 构造PKCS8EncodedKeySpec对象
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        // KEY_ALGORITHM 指定的加密算法
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        // 取私钥匙对象
        PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);
        // 用私钥对信息生成数字签名
        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
        signature.initSign(priKey);
        signature.update(data);
        return CryptUtil.encryptBASE64(signature.sign());
    }

    /**
     * 校验数字签名
     * 
     * @param data
     *            加密数据
     * @param publicKey
     *            公钥
     * @param sign
     *            数字签名
     * 
     * @return 校验成功返回true 失败返回false
     * @throws Exception
     * 
*/
    public static boolean verify(byte[] data, String publicKey, String sign) throws Exception {
        // 解密由base64编码的公钥
        byte[] keyBytes = CryptUtil.decryptBASE64(publicKey);
        // 构造X509EncodedKeySpec对象
        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
        // KEY_ALGORITHM 指定的加密算法
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        // 取公钥匙对象
        PublicKey pubKey = keyFactory.generatePublic(keySpec);
        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
        signature.initVerify(pubKey);
        signature.update(data);
        // 验证签名是否正常
        return signature.verify(CryptUtil.decryptBASE64(sign));
    }

    /**
     * 解密<br>
     * 用私钥解密
     * 
     * @param data
     * @param key
     * @return
     * @throws Exception
*/
    public static byte[] decryptByPrivateKey(byte[] data, String key) throws Exception {
        // 对密钥解密
        byte[] keyBytes = CryptUtil.decryptBASE64(key);
        // 取得私钥
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);
        // 对数据解密
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return cipher.doFinal(data);
    }

    /**
     * 解密<br>
     * 用私钥解密
     * 
     * @param data
     * @param key
     * @return
     * @throws Exception
*/
    public static byte[] decryptByPublicKey(byte[] data, String key) throws Exception {
        // 对密钥解密
        byte[] keyBytes = CryptUtil.decryptBASE64(key);
        // 取得公钥
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key publicKey = keyFactory.generatePublic(x509KeySpec);
        // 对数据解密
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.DECRYPT_MODE, publicKey);
        return cipher.doFinal(data);
    }

    /**
     * 加密<br>
     * 用公钥加密
     * 
     * @param data
     * @param key
     * @return
     * @throws Exception
*/
    public static byte[] encryptByPublicKey(byte[] data, String key) throws Exception {
        // 对公钥解密
        byte[] keyBytes = CryptUtil.decryptBASE64(key);
        // 取得公钥
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key publicKey = keyFactory.generatePublic(x509KeySpec);
        // 对数据加密
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(data);
    }

    /**
     * 加密<br>
     * 用私钥加密
     * 
     * @param data
     * @param key
     * @return
     * @throws Exception
*/
    public static byte[] encryptByPrivateKey(byte[] data, String key) throws Exception {
        // 对密钥解密
        byte[] keyBytes = CryptUtil.decryptBASE64(key);
        // 取得私钥
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
        Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);
        // 对数据加密
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
        cipher.init(Cipher.ENCRYPT_MODE, privateKey);
        return cipher.doFinal(data);
    }

    /**
     * 取得私钥
     * 
     * @param keyMap
     * @return
     * @throws Exception
*/
    public static String getPrivateKey(Map<String, Object> keyMap) throws Exception {
        Key key = (Key) keyMap.get(PRIVATE_KEY);
        return CryptUtil.encryptBASE64(key.getEncoded());
    }

    /**
     * 取得公钥
     * 
     * @param keyMap
     * @return
     * @throws Exception
*/
    public static String getPublicKey(Map<String, Object> keyMap) throws Exception {
        Key key = (Key) keyMap.get(PUBLIC_KEY);
        return CryptUtil.encryptBASE64(key.getEncoded());
    }

    /**
     * 初始化密钥
     * 
     * @return
     * @throws Exception
*/
    public static Map<String, Object> initKey() throws Exception {
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);
        keyPairGen.initialize(1024);
        KeyPair keyPair = keyPairGen.generateKeyPair();
        // 公钥
        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
        // 私钥
        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
        Map<String, Object> keyMap = new HashMap<String, Object>(2);
        keyMap.put(PUBLIC_KEY, publicKey);
        keyMap.put(PRIVATE_KEY, privateKey);
        return keyMap;
    }

    /**
     * @param args
*/
    public static void main(String[] args) {
        try {
//            PBECryptUtil.main(args);
            System.out.println("****************************************");
            System.out.println("=====RSA加密与解密=====");
            // 初始化公钥,私钥
            Map<String, Object> keyMap = initKey();
            String publicKey = RSACryptUtil.getPublicKey(keyMap);
            String privateKey = RSACryptUtil.getPrivateKey(keyMap);
            System.out.println("公钥: \n\r" + publicKey);
            System.out.println("私钥： \n\r" + privateKey);
            System.out.println("公钥加密――私钥解密");
            String inputStr = "merchantId=152143030798880&merchantUserId=0001111111117329733&mobile=18222140933";
//            String inputStr = "阿伯才的覆盖";
            byte[] data = inputStr.getBytes("UTF-8");
            // 公钥加密
            byte[] encodedData = RSACryptUtil.encryptByPublicKey(data, publicKey);
            System.out.println("公钥加密后:" + new BigInteger(encodedData).toString(32));
            // 私钥解密
            byte[] decodedData = RSACryptUtil.decryptByPrivateKey(encodedData, privateKey);
            String outputStr = new String(decodedData, "UTF-8");
            System.out.println("加密前: " + inputStr);
            System.out.println("解密后: " + outputStr);

            System.out.println("私钥加密――公钥解密");
            // 私钥加密
            encodedData = RSACryptUtil.encryptByPrivateKey(data, privateKey);
            System.out.println("私钥加密后:" + new BigInteger(encodedData).toString(32));
            // 公钥解密
            decodedData = RSACryptUtil.decryptByPublicKey(encodedData, publicKey);
            outputStr = new String(decodedData, "UTF-8");
            System.out.println("加密前: " + inputStr);
            System.out.println("解密后: " + outputStr);

            System.out.println("私钥签名――公钥验证签名");
            // 使用私钥产生签名
            String sign = RSACryptUtil.sign(encodedData, privateKey);
            System.out.println("签名:" + sign);
            // 使用公匙验证签名
            boolean status = RSACryptUtil.verify(encodedData, publicKey, sign);
            System.err.println("验证签名结果:" + status);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}
